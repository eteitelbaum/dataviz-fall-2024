{
  "hash": "aa1008ea8963448441341f91337ae412",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Shiny Apps\"\ndate: today\ndate-format: long\nfooter: \"[DataViz 2102 Website](https://dataviz-gwu.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    multiplex: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n\n# Exploring Shiny \n\n## What is Shiny?\n\n::: {.incremental}\n- Shiny is an R package developed by [Posit](www.posit.co) that makes it easy to build interactive web apps straight from R\n- No HTML, CSS, or JavaScript required\n- Shiny apps can be hosted on the web or run locally\n- Makes it easy to explore your data and share your analysis\n:::\n\n## What You Can Do with Shiny {.smaller}\n\n::: {.incremental}\n- **Data Exploration**: Utilize interactive widgets to filter and sort data dynamically\n- **Basic Visualizations**: Create real-time, interactive graphs and charts from datasets\n- **Advanced Analytics**: Integrate R's robust statistical and machine learning capabilities for in-depth analysis\n- **Interactive Reports**: Build dynamic reports that update based on user input or live data\n- **Production-Grade Dashboards**: Develop complex, multi-page dashboards with user authentication and data streaming\n:::\n\n## Flavors of Shiny {.smaller}\n\n:::{.incremental}\n- [R Shiny](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html): The original framework, allowing R users to build interactive web applications directly within R\n- [Shiny for Python](https://shiny.posit.co/py/): Extends Shiny's capabilities to Python, enabling Python users to create Shiny applications using Python code\n- [Shiny Live](https://shiny.posit.co/py/docs/jupyter-widgets.html#shinylive): Enables you to run apps off the user's browser rather than having to deploy them to a server (only available in Python right now)\n- [Shiny Express](https://shiny.posit.co/blog/posts/shiny-express/): A simplified version of Shiny for Python aimed at rapid development and deployment of applications with less coding and configuration required\n- [Quarto Dashboards](https://quarto.org/docs/dashboards/): Not a Shiny app per se, but can connected to a Shiny server for increased interactivity\n:::\n\n## User Demos\n\n- Have a look at the [Shiny gallery](https://shiny.posit.co/r/gallery/#user-showcase)\n- Pick an app that you like?\n- One thing you would like to learn from that app?\n- One thing that you would improve\n- Discuss with a neighbor\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Feature Demos\n\n- Now let's look at [feature demos](https://shiny.posit.co/r/gallery/#feature-demos)\n- What widgets, layouts, or features are you interested in?\n- How would you use them in your own apps?\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer2\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Professional Apps {.smaller}\n\n- Here is a selection of modern, professional Shiny Apps\n  - [PESKAS](https://timor.peskas.org/) fisheries monitoring in Timor-Leste\n  - [WaCSE](https://wsda.shinyapps.io/WaCSE/) for tracking reductions in GHG emissions as part of Washington State's [Sustainable Farms and Fields](https://www.scc.wa.gov/programs/sustainable-farms-fields) program\n  - [JHU Lyme Disease Tracker](https://www.hopkinslymetracker.org/)\n  - [movie-vue-r](https://friss.shinyapps.io/shiny-vue-r/#/) a Vue.js and Shiny app for exploring movie + COVID information\n- These are mainly for inspiration, but try to find the code on GitHub and see how much you can understand\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer3\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Getting Started with Shiny\n\n- Open RStudio\n- Start a folder for the workshop \n- Install the `shiny` package (if not installed already)\n- Create a new Shiny app\n  - (File > New File > Shiny Web App)\n- Run the Geyser App\n- Try opening it in a browser\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer4\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Challenge\n\n- Look at the `faithful` dataset in R (hint: `?faithful`)\n- Create a Shiny app that displays a histogram of the `eruptions` column\n- Change the labels accordingly\n- What kind of distribution do you see?\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer5\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# Elements of a Shiny App\n\n## Shiny App Basics\n\nTwo parts of a Shiny app:\n\n- **UI**: User Interface\n- **Server**: Server logic\n\nThey come together in a single script: `app.R`\n\n::: aside\n**Note:** You can compose your app with the ui and server in separate scripts, but we will stick to the single `app.R` script for now.\n:::\n\n## The app.R Script\n\n\n\n::: {.cell}\n\n:::\n\n\n\n# The User Interface (`ui`)\n\n## The UI\n\n\n\n::: {.cell}\n\n:::\n\n\n\n`fluidPage()` creates a Bootstrap page\n\n## The UI\n\n- [Bootstrap](https://getbootstrap.com/docs/5.0/getting-started/introduction/) is a free front-end framework used in web development  \n- It is built on **HTML**, **CSS** and **JavaScript**\n- There are many version of Bootstrap, the latest being version 5, but R Shiny uses version 3 by default\n\n::: aside\nWith the `bslib` package you can use Bootstrap 4 or 5 in your R Shiny apps.\n:::\n\n## The UI\n\n\n\n::: {.cell}\n\n:::\n\n\n\nUnder the hood, every UI function is translated to HTML.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"<h2>Hello, Shiny!</h2>\"\n```\n\n\n:::\n:::\n\n\n\n<br>\n\nThis HTML can have styles attached to it, either by the `style` attribute, or by a CSS class.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"<div class=\\\"col-sm-4\\\">\\n  <form class=\\\"well\\\" role=\\\"complementary\\\"></form>\\n</div>\"\n```\n\n\n:::\n:::\n\n\n\n## The UI\n\nTo let users interact with your app, you can add [input controls](https://shiny.posit.co/r/getstarted/shiny-basics/lesson3/). A basic input control has:\n\n- an `inputId`\n- a `label`\n- a `value`\n\n## The UI\n\nFor example:\n\n```{.r}\nnumericInput(inputId = \"number\", \n             label = \"Enter a number\", \n             value = 0)\n```\n<br>\n```{.r}\nactionButton(inputId = \"button\", \n             label = \"Click me\")\n```\n\n## Updating the UI\n\n::: {.incremental}\n- When the app runs, every user gets served the same HTML from the UI\n- When the user interacts with the UI, we want that HTML to **react** and update based on user input\n- That is possible because these outputs are **reactive outputs**\n- The server logic (which we will discuss in detail soon) uses **reactive programming** that updates related inputs in the UI\n:::\n\n## Updating the UI\n\nShiny has several functions that turn R objects into reactive outputs for your `ui`: the [Output](https://shiny.posit.co/r/getstarted/shiny-basics/lesson4/) family of functions.\n\nEach function creates a specific type of output, for example:\n\n| UI Function | Output type |\n|----------|-------------|\n| textOutput() | text |\n| tableOutput() | table |\n| plotOutput() | plot |\n| uiOutput() | raw HTML |\n: {.table .table-striped .table-hover}\n\n## Updating the UI\n\nEvery output element needs a single argument: `outputId`. This is a simple string that needs to be **unique**.\n\n<br>\n\n```{.r}\ntextOutput(outputId = \"text\")\n```\n\n<br>\n\nThis `textOutput` tells Shiny what to display. It's a **placeholder** for what is goign to be produced by the server logic.\n\n# The Server Logic\n\n## The Server\n\n::: {.incremental}\n- The server function builds an object named **output** and this object will contain all the code needed to display the R objects in the UI\n- This output object is **list-like**\n- Each R object that you want to display has its own entry in this list\n- Therefore the name of every output in your UI needs to match a definition in the server, e.g. `output$text`\n:::\n\n## The Server\n\nEach entry in the output list should contain a **Render** function. You must use **Render** functions that match the **Output** functions:\n\n| UI Function | Output type | Render function |\n|----------|-------------|-----------------|\n| textOutput() | text | renderText() |\n| tableOutput() | table | renderTable() |\n| plotOutput() | plot | renderPlot() |\n| uiOutput() | raw HTML | renderUI() |\n: {.table .table-striped .table-hover}\n\n## The Server\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Using Inputs\n\n- This works the same with inputs.\n- The server can access an object named `input` that will contain the value of all the input objects defined in the UI.\n- This object is **list-like**, just like the output object. Each input value has its own entry in this list, e.g. `input$number`.\n\n## \n\nCombining the input and output objects, we get a simple app that displays the square of a number. 👏\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Your Turn! \n\n- Create a Shiny app that displays the square of a number\n- Try entering different numbers manually\n- Try using the up and down arrows\n- Adjust the server logic to display the cube of a number\n- Try other calculations\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Eager Output\n\nAn output is **eager**: it will update as soon as the input changes.\n\n<br>\n\nThis **eagerness** is handy: you don't need to worry about updating the output when the input changes.\n\n<br>\n\nBut what if you want to trigger the calculation only when you want?\n\n## Adding a Reactivity Modifier\n\nYou could use an `actionButton` as an **event**:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-11.1_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n\n## Try It Yourself! \n\n- Add an `actionButton` to your app\n- Adjust the text on the button to read \"Calculate\"\n- Make sure it functions as intended\n- Go to the [getting started](https://shiny.posit.co/r/getstarted/shiny-basics/lesson3/) lesson on control widgets\n- See if you can control the calculation with a checkbox instead of a button\n- What is wrong with this approach?\n\n## Acknowledgements\n\n- Parts of this presentation were adapted from Veerle van Leemput's [Shiny 101: The Modular App Blueprint](https://github.com/hypebright/shinyconf2024-shiny101)\n",
    "supporting": [
      "week-11.1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}