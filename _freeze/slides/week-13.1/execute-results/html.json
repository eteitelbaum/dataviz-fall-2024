{
  "hash": "d3031338ac40775ed7b5bdcb814ef4b5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Styling Your App\"\ndate: today\ndate-format: long\nfooter: \"[DataViz 2102 Website](https://dataviz-gwu.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    #multiplex: true\n    chalkboard: true\nexecute:\n  echo: true\n  eval: false\n  freeze: auto\n---\n\n\n\n# Looks Matter! ðŸŽ¨\n\n## Quickly Leveling Up Your UI\n\n- There are many ways to make your app look instantly better\n- One of them is using `bslib` which is a package that provides a modern UI toolkit for Shiny and R Markdown based on Bootstrap\n- The cool thing: you can get around Shiny's default usage of Bootstrap version 3!\n\n## Working with {bslib}\n\n```{.r code-line-numbers=\"2,4-7\"}\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_navbar(\n  theme = bs_theme(version = 5),\n  title = \"Modular App Blueprint\",\n  nav_panel(\n    title = \"Numbers\",\n    numericInput(inputId = \"number\",\n                 label = \"Enter a number\",\n                 value = 0),\n    actionButton(inputId = \"button\",\n                 label = \"Click me\"),\n    textOutput(outputId = \"text\")\n  )\n)\n\nserver <- function(input, output, session) {\n  output$text <- renderText({\n    input$number^2\n  }) |> bindEvent(input$button)\n}\n\nshinyApp(ui, server)\n```\n\n## Working with {bslib}\n\nUse the `bootswatch` argument to change the theme (other [bootswatch themes](https://bootswatch.com/):\n\n```{.r code-line-numbers=\"5\"}\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_navbar(\n  theme = bs_theme(version = 5, bootswatch = \"minty\"),\n  title = \"Modular App Blueprint\",\n  nav_panel(\n    title = \"Numbers\",\n    numericInput(inputId = \"number\",\n                 label = \"Enter a number\",\n                 value = 0),\n    actionButton(inputId = \"button\",\n                 label = \"Click me\"),\n    textOutput(outputId = \"text\")\n  )\n)\n\nserver <- function(input, output, session) {\n  output$text <- renderText({\n    input$number^2\n  }) |> bindEvent(input$button)\n}\n\nshinyApp(ui, server)\n```\n\n## Working with {bslib}\n\nYou can also customize the theme:\n\n```{.r code-line-numbers=\"4-14,17\"}\nlibrary(shiny)\nlibrary(bslib)\n\ncustom_theme <- bs_theme(\n  version = 5,\n  bg = \"#F9F9F9\",\n  fg = \"#003f5c\",\n  primary = \"#bc5090\",\n  secondary = \"#58508d\",\n  warning = \"#ffa600\",\n  danger = \"#ff6361\",\n  info = \"#0091d5\",\n  base_font = font_google(\"PT Sans\")\n)\n\nui <- page_navbar(\n  theme = custom_theme,\n  title = \"Modular App Blueprint\",\n  nav_panel(\n    title = \"Numbers\",\n    numericInput(inputId = \"number\",\n                 label = \"Enter a number\",\n                 value = 0),\n    actionButton(inputId = \"button\",\n                 label = \"Click me\",\n                 width = \"100px\"),\n    textOutput(outputId = \"text\")\n  )\n)\n\nserver <- function(input, output, session) {\n  output$text <- renderText({\n    input$number^2\n  }) |> bindEvent(input$button)\n}\n\nshinyApp(ui, server)\n```\n\n## Your Turn!\n\n- Take the toy app from this section or another one you have made\n- Add some styling to it using `bslib`\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# Shiny Dashboards\n\n## What is a Dashboard?\n\n- A dashboard combines multiple visualizations into a single page\n- It provides a high-level overview of the data\n- Here is an [example](https://emmanuelteitelbaum.shinyapps.io/vdem-dashboard) of a dashboard I made using the `shinydashboard` package\n\n## Acknowledgements\n\n- Parts of this presentation were adapted from Veerle van Leemput's [Shiny 101: The Modular App Blueprint](https://github.com/hypebright/shinyconf2024-shiny101)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}