{
  "hash": "b6fd6962d6cb18313cee800464cb44d0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Working With Data\ndate: today\ndate-format: long\nfooter: \"[DataViz 2102 Website](https://dataviz-gwu.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    #multiplex: true\n    chalkboard: true\nexecute:\n  echo: true\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n## How Do We Get Tidy/Clean Data? \n\n<br>\n\n- Wrangle it ourselves\n- Use a package where it has been wrangled for us\n- Download via an API \n\n## This Lesson\n\n<br>\n\n- Practice with World Bank and V-Dem data\n- World Bank data through `wbstats`\n  - There is another package called `WDI`\n  - Both packages for accessing data through WB API\n- Varieties of Democracy (V-Dem) through `vdemlite`\n  - There is also a package called `vdemdata`\n  - `vdemlite` offers more functionality, works better in the cloud\n  \n## `filter()`, `select()`, `mutate()` {.smaller}\n\n<br>\n\nAlong the way we will practice some important `dplyr` verbs:\n\n<br>\n\n- `filter()` is used to select observations based on their values\n- `select()` is used to select variables\n- `mutate()` is used to create new variables or modifying existing ones  \n\n<br>\n\nAs well as some helpful functions from the `janitor` package.  \n\n## APIs\n\n<br>\n\n- API stands for \"Application Programming Interface\"\n- Way for two computers to talk to each other\n- In our case, we will use APIs to download social science data\n\n## APIs in R\n\n::: {.incremental}\n- APIs are accessed through packages in R\n- Sometimes there can be more than one package for an API\n- Much easier than reading in data from messy flat file!\n- We will use a few API packages in this course\n  - World Bank data through `wbstats` (or `WDI`)\n  - `fredr` for Federal Reserve Economic Data\n  - `tidycensus` for US Census data\n- But there are many APIs out there (please explore!)\n:::\n\n\n## Searching for WB Indicators\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflfp_indicators <- wb_search(\"female labor force\") # store the list of indicators\n\nprint(flfp_indicators, n=26) # view the indicators\n```\n:::\n\n\n## `wbstats` Example\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-4|6-7|9|10|11|12|13-16|18-19\"}\n# Load packages\nlibrary(wbstats) # for downloading WB data\nlibrary(dplyr) # for selecting, renaming and mutating\nlibrary(janitor) # for rounding\n\n# Store the list of indicators in an object\nindicators <- c(\"flfp\" = \"SL.TLF.CACT.FE.ZS\", \"women_rep\" = \"SG.GEN.PARL.ZS\") \n\n# Download the data  \nwomen_emp <- wb_data(indicators, mrv = 50) |> # download data for last 50 yrs\n  select(!iso2c) |> # drop the iso2c code which we won't be using\n  rename(year = date) |> # rename date to year \n  mutate(\n    flfp = round_to_fraction(flfp, denominator = 100), # round to nearest 100th\n    women_rep = round_to_fraction(women_rep, denominator = 100) \n  )\n\n# View the data\nglimpse(women_emp) \n```\n:::\n\n\n## Your Turn!\n\n<br>\n\n- Search for a WB indicator\n- Download the data\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"top:10%;right:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## The V-Dem Dataset\n\n<br>\n\n- V-Dem stands for Varieties of Democracy\n- It is a dataset that measures democracy around the world\n- Based on expert assessments of the quality of democracy in each country\n- Two packages we will explore: `vdemdata` and `vdemlite`\n\n## Downloading V-Dem Data\n\n<br>\n\nThe `vdem` function from `vdemdata` just downloads all of the data. Try running this code chunk. What do you see in `democracy`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vdemdata) # load the V-Dem package\n\ndemocracy <- vdem() # download the V-Dem dataset\n```\n:::\n\n\n\n## `filter()`\n\n- Run this code. What do you see?\n- Try changing the year \n- For one year, use `==` instead of `>=`\n- Or try `<=` and see what happens \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year >= 1990) # filter out years less than 1990\n  \nglimpse(democracy)  \n```\n:::\n\n\n## `=` versus `==`\n\n<br>\n\n- `=` is used to assign values to variables, just like `<-`\n- `==` is used to test if two values are equal to each other\n- So `filter(year == 1990)` will give you just the observations for 1990\n\n## `>=` and `<=`\n\n- `>=` is used to test if a value is greater than or equal to another value\n- `<=` is used to test if a value is less than or equal to another value\n- So `filter(year >= 1990)` will give you the observations for 1990 and later\n- And `filter(year <= 1990)` will give you the observations for 1990 and earlier\n\n## `select()`\n\n- Run this code. What do you see?\n- Now try `v2x_libdem` instead of `v2x_polyarchy`\n- Choose more from the [codebook](https://v-dem.net/documents/24/codebook_v13.pdf) \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemocracy <- vdem |> # download the V-Dem dataset\n  select(                  # select (and rename) these variables\n    country = country_name,     # before the = sign is new name  \n    vdem_ctry_id = country_id,  # after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy\n  )\n  \nglimpse(democracy)  \n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer2\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0%;right:5%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## `mutate()`\n\n- Modify the code to create new variable that is three times the value of `polyarchy` \n- How about `polyarchy` squared? \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year == 2015) |> # keep only observations from 2015\n  select(                  # select (and rename) these variables\n    country = country_name,     # name before the = sign is new name  \n    vdem_ctry_id = country_id,  # name after the = sign is old name\n    year, \n    polyarchy = v2x_polyarchy \n    ) |>\n  mutate(\n    polyarchy_dbl = polyarchy * 2 # create variable 2X polyarchy\n  )\n  \nglimpse(democracy)  \n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer3\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0%;right:5%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Some Common Arithmetic Operators\n\n<br>\n\n- `+` addition\n- `-` subtraction\n- `*` multiplication\n- `/` division\n- `^` exponentiation (also `**`)\n\n## `vdemdata` Example {.smaller}\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(vdemdata) # to download V-Dem data\nlibrary(dplyr)\n\n# Download the data\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year == 2015)  |> # filter year, keep 2015\n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n\n# View the data\nglimpse(democracy)\n```\n:::\n\n\n## {.smaller}\n\n<br>\n\nUse `filter()` to select years...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-3\"}\n# Download the data\ndemocracy <- vdem |> \n  filter(year == 2015)  |> # keep 2015\n  select(                 \n    country = country_name,       \n    vdem_ctry_id = country_id,  \n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region,\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n```\n:::\n\n\n## {.smaller}\n\n<br>\n\nUse `select()` to choose variables...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-11\"}\n# Download the data\ndemocracy <- vdem |> \n  filter(year == 2015)  |> \n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, \n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n```\n:::\n\n\n## {.smaller}\n\n<br>\n\nUse `mutate` with `case_match()` to Recode Region....\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"12-23\"}\n# Download the data\ndemocracy <- vdem |>\n  filter(year == 2015)  |> \n  select(                  \n    country = country_name,     \n    vdem_ctry_id = country_id,  \n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n                    # number on the left of the ~ is the V-Dem region code\n                    # we are changing the number to the country name on the right\n                    # of the equals sign\n  )\n```\n:::\n\n\n## `vdemlite` \n\n<br>\n\n- Covers a few hundred commonly used indicators and indices from 1970 onward\n- Covers everything in [this document](https://v-dem.net/documents/41/v-dem_structureofaggregation_v14.pdf)\n- As opposed to 4000+ indicators from the 18th century onward\n- Adds some functionality for working with the data\n- Easier to work with in the cloud and apps\n\n## `vdemlite` fuctions\n\n<br>\n\n- `fetchdem()` to download the data\n- `summarizedem()` provides searchable table of indicators with summary stats\n- `searchdem()` to search for specific indicators or all indicators used to construct an index\n- See the [vdemlite documentation](https://eteitelbaum.github.io/vdemlite/articles/vdemlite.html) for more details\n\n## `fetchdem()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(vdemlite) # to download V-Dem data\n\n# Polyarchy and clean elections index for USA and Sweden for 2000-2020\ndem_indicators <- fetchdem(indicators = c(\"v2x_polyarchy\", \"v2xel_frefair\"),\n                           countries = c(\"USA\", \"SWE\"))\n\n# View the data\nglimpse(dem_indicators)\n```\n:::\n\n\n## `summarizedem()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summary statistics for the polyarchy index\nsummarizedem(indicator = \"v2x_polyarchy\")\n```\n:::\n\n\n## `searchdem()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearchdem()\n```\n:::\n\n\n## Your Turn\n\n<br>\n\n- Try using `searchdem()` to find an indicator you are interested in using\n- Use `summarizedem()` to get summary statistics for that variable\n- Use `fetchdem()` to download the data for that variable for a country or countries of interest\n- Try using `mutate()` to add region codes to the data \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer4\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0%;right:5%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}