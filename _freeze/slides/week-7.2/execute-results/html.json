{
  "hash": "419be2d22f0fff2e791d01e77ec1e010",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Make a Map Function\"\ndate: today\ndate-format: long\nfooter: \"[DataViz 2102 Website](https://dataviz-gwu.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    #multiplex: true\n    chalkboard: true\nexecute:\n  echo: true\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n\n# Make a Map Function\n\n## What is a Function\n\n- A reusable piece of code that takes some inputs, performs some operations and returns an output\n- Elements\n  - Inputs (arguments)\n  - Operations (code block)\n  - Output (return value)\n- Like cooking (to produce a dish, you have a recipe and ingredients)\n- Don't repeat yourself (DRY)\n\n## Simple Example\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the function\nsquare_number <- function(x) {\n  result <- x^2\n  return(result)\n}\n\n# Use the function\nsquare_number(55)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3025\n```\n\n\n:::\n:::\n\n\n\n## Tidy Evaluation\n\n<br>\n\nIn the Tidyverse, ridy evaluation allows you to reference a column without using quotes or referencing the data frame\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ndemocracy |> filter(polyarchy > .5)\n```\n:::\n\n\nvs. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ndemocracy[democracy$polyarchy > .5, ]\n```\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ndemocracy[democracy[[\"polyarchy\"]] > .5, ]\n```\n:::\n\n\n\n## Tidy Evaluation\n\n- Tidy evaluation lets us refer to **column names** without quotes, which is great for interactive use.\n- But it can be **tricky** for programming because `dplyr` and `ggplot2` assume that any argument passed to them is already a column name.\n- When we pass a **variable** containing a column name (e.g., a string), R doesn't automatically evaluate the variable to find the column name.\n- We need to explicitly tell R to look inside the variable and treat it as a column.\n\n## Tidy Evaluation\n\n<br> \n\n- To do this we use `{{}}` in functions\n- For Shiny apps and strings we will use `.data[[]]`\n- Can also use `!!sym()` in some contexts\n- Depricated or less preferred methods include `get()`, `eval(parse())`,`aes_string()` and `!!enquo()`\n\n\n## Map Function\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-7.2_files/figure-revealjs/map-function0-1.png){width=960}\n:::\n:::\n\n\n\n## Map Function\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"functions/wb-maps.R\", local = knitr::knit_global())\n\ncreate_map(var_id = \"SL.TLF.CACT.FE.ZS\", \n           title= \"Female Labor Force Participation\", \n           legend_title = \"FLFP %\", \n           theme = \"inferno\", \n           direction = -1)\n```\n:::\n\n\n\n## Map Function\n\n\n\n::: {.cell lable='map-function1'}\n\n```{.r .cell-code  code-line-numbers=\"|7,11,16,18-19,27-28\"}\nlibrary(rnaturalearth)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(wbstats)\n\ncreate_map <- function(var_id, title, legend_title, theme, direction){\n\nne_countries(scale = \"medium\", returnclass = \"sf\") |> \n  left_join(\n    wb_data(var_id, mrnev = 1), \n    join_by(iso_a3 == iso3c)\n  ) |> \n  filter(name != \"Antarctica\") |>  \n  ggplot() + \n  geom_sf(aes(fill = .data[[var_id]])) + \n  labs(\n    title =  title, \n    fill = legend_title, \n    caption = \"Source: World Bank Development Indicators\"\n    ) +\n  theme_map() +\n  theme(\n    plot.title = element_text(face = \"bold\"),\n  ) +\n  scale_fill_viridis_c( \n    option = theme, \n    direction = direction \n    )\n}\n```\n:::\n\n\n\n## Map Function\n\n<br>\n\nSave the source code in a folder... \n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"functions/wb-maps.R\", local = knitr::knit_global())\n```\n:::\n\n\n\n<br> \n\nand call in your document...<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_map(var_id = \"SL.TLF.CACT.FE.ZS\", \n           title= \"Female Labor Force Participation\", \n           legend_title = \"FLFP %\", \n           theme = \"inferno\", \n           direction = -1)\n```\n:::\n\n\n\n## Your Turn{.smaller}\n\n<br>\n\n- Take the code from module 3.1, paste in an R script and save in a folder\n- Call `source()` and then the function in your Quarto document\n- Change the values for the five parameters \n- Go back to the code and add a new parameter (like subtitle)\n- Try calling the function again\n- Write something about your map and render the Quarto document\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_8749a03d\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Democracy Function{.smaller}\n\n<br>\n\n- Can you make a map function for a democracy indicator?\n- Come up with a plan\n  - What will the name of the function be?\n  - What will the parameters be?\n  - What would the\n- Take democracy code from last class and implement\n- Add more parameters if desired\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_79dd3fc5\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Other Functions\n\n<br>\n\n- What other visualizations could you \"functionize\"?\n- Line charts?\n- Bar charts? \n- Scatter plots? \n- Try one!\n\n## Group and Summarize\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# var_id = any World Bank indicator\n# mrv = number of most recent values\n# group_var = column to group by (country or date)\n\nmean_wb_data <- function(var_id, mrv, group_var){\n  wb_data(var_id, mrv = mrv) |> \n    group_by( {{ group_var }}) |> \n    summarize(mean_value = mean(.data[[var_id]], na.rm = TRUE))\n}\n\n# Example call\nmean_wb_data(\"SL.TLF.CACT.FE.ZS\", 3, date)\n```\n:::\n\n\n\n## Line Chart\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_line_chart <- function(data, x_var, y_var, color_var, title, x_label,\n                              y_label, legend_title, color_palette = \"turbo\",\n                              palette_end = 0.8) {\n  \n  ggplot(data, aes(x = {{ x_var }}, y = {{ y_var }}, color = {{ color_var }})) +\n    geom_line() +\n    labs(\n      title = title,\n      x = x_label,\n      y = y_label\n    ) +\n    scale_color_viridis_d(\n      name = legend_title,  \n      option = color_palette, \n      end = palette_end\n    ) +\n    theme_minimal()\n}\n\n# Example call\ncreate_line_chart(\n  data = brics_dem, \n  x_var = year, \n  y_var = v2x_polyarchy, \n  color_var = country_name, \n  title = \"Democracy in the BRICS Nations\", \n  x_label = \"Year\", \n  y_label = \"Polyarchy Score\",\n  legend_title = \"Index\"\n)\n```\n:::\n",
    "supporting": [
      "week-7.2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}