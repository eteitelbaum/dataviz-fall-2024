---
title: "Styling Your App"
date: today
date-format: long
footer: "[DataViz 2102 Website](https://dataviz-gwu.rocks)"
logo: images/dataviz-logo.png
format:
  revealjs:
    theme: [simple, custom.scss]
    transition: fade
    slide-number: true
    #multiplex: true
    chalkboard: true
execute:
  echo: true
  eval: false
  freeze: auto
---

# Looks Matter! ðŸŽ¨

## Quickly Leveling Up Your UI

- There are many ways to make your app look instantly better
- One of them is using `bslib` which is a package that provides a modern UI toolkit for Shiny and R Markdown based on Bootstrap
- The cool thing: you can get around Shiny's default usage of Bootstrap version 3!

## Working with {bslib}

```{.r code-line-numbers="2,4-7"}
library(shiny)
library(bslib)

ui <- page_navbar(
  theme = bs_theme(version = 5),
  title = "Modular App Blueprint",
  nav_panel(
    title = "Numbers",
    numericInput(inputId = "number",
                 label = "Enter a number",
                 value = 0),
    actionButton(inputId = "button",
                 label = "Click me"),
    textOutput(outputId = "text")
  )
)

server <- function(input, output, session) {
  output$text <- renderText({
    input$number^2
  }) |> bindEvent(input$button)
}

shinyApp(ui, server)
```

## Working with {bslib}

Use the `bootswatch` argument to change the theme (other [bootswatch themes](https://bootswatch.com/):

```{.r code-line-numbers="5"}
library(shiny)
library(bslib)

ui <- page_navbar(
  theme = bs_theme(version = 5, bootswatch = "minty"),
  title = "Modular App Blueprint",
  nav_panel(
    title = "Numbers",
    numericInput(inputId = "number",
                 label = "Enter a number",
                 value = 0),
    actionButton(inputId = "button",
                 label = "Click me"),
    textOutput(outputId = "text")
  )
)

server <- function(input, output, session) {
  output$text <- renderText({
    input$number^2
  }) |> bindEvent(input$button)
}

shinyApp(ui, server)
```

## Working with {bslib}

You can also customize the theme:

```{.r code-line-numbers="4-14,17"}
library(shiny)
library(bslib)

custom_theme <- bs_theme(
  version = 5,
  bg = "#F9F9F9",
  fg = "#003f5c",
  primary = "#bc5090",
  secondary = "#58508d",
  warning = "#ffa600",
  danger = "#ff6361",
  info = "#0091d5",
  base_font = font_google("PT Sans")
)

ui <- page_navbar(
  theme = custom_theme,
  title = "Modular App Blueprint",
  nav_panel(
    title = "Numbers",
    numericInput(inputId = "number",
                 label = "Enter a number",
                 value = 0),
    actionButton(inputId = "button",
                 label = "Click me",
                 width = "100px"),
    textOutput(outputId = "text")
  )
)

server <- function(input, output, session) {
  output$text <- renderText({
    input$number^2
  }) |> bindEvent(input$button)
}

shinyApp(ui, server)
```

## Your Turn!

- Take the toy app from this section or another one you have made
- Add some styling to it using `bslib`

```{r}
#| label: timer1
#| eval: true
#| echo: false

library(countdown)
countdown(minutes = 10, 
          id = "timer1", 
          bottom = "10%",
          right = "10%",
          color_border = "#fff",
          color_text = "#fff",
          color_running_background = "#42affa",
          color_running_text = "black",
          color_finished_background = "#E5D19D",
          color_finished_text = "#00264A")
```

# Shiny Dashboards

## What is a Dashboard?

- A dashboard combines multiple visualizations into a single page
- It provides a high-level overview of the data
- Here is an [example](https://emmanuelteitelbaum.shinyapps.io/vdem-dashboard) of a dashboard I made using the `shinydashboard` package

## Acknowledgements

- Parts of this presentation were adapted from Veerle van Leemput's [Shiny 101: The Modular App Blueprint](https://github.com/hypebright/shinyconf2024-shiny101)
